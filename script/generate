#!/usr/bin/env ruby

# This is a utility for generating empty Ruby-Processing templates.
# -- omygawshkenas

require 'fileutils'
require 'erb'

module Processing
  class Generator
    
    # Ripped from activesupport
    def titleize(word)
      humanize(underscore(word)).gsub(/\b([a-z])/) { $1.capitalize }
    end
    
    def humanize(lower_case_and_underscored_word)
      lower_case_and_underscored_word.to_s.gsub(/_id$/, "").gsub(/_/, " ").capitalize
    end
    
    def camelize(lower_case_and_underscored_word, first_letter_in_uppercase = true)
      if first_letter_in_uppercase
        lower_case_and_underscored_word.to_s.gsub(/\/(.?)/) { "::" + $1.upcase }.gsub(/(^|_)(.)/) { $2.upcase }
      else
        lower_case_and_underscored_word.first + camelize(lower_case_and_underscored_word)[1..-1]
      end
    end
  
    def underscore(camel_cased_word)
      camel_cased_word.to_s.gsub(/::/, '/').
        gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
        gsub(/([a-z\d])([A-Z])/,'\1_\2').
        tr("-", "_").
        downcase
    end
    
    def generate!
      # Check to make sure that the main file exists
      main_file_path = ARGV.first
      unless main_file_path
        puts <<-USAGE
  
      Usage: script/generate <sketch_to_generate> <width> <height>
      Width and Height are optional.
      
      Example: script/generate fancy_drawing/app 800 600
  
      USAGE
        exit
      end
      main_file = File.basename(main_file_path, ".rb")
      
      # Get the substitutions
      @name = camelize(main_file)
      @file_name = underscore(main_file)
      @title = titleize(main_file)
      @width = ARGV[1] || "500"
      @height = ARGV[2] || "500" 
  
      # Make the file
      dir = File.dirname main_file_path
      FileUtils.mkdir_p dir
      template = File.new(File.join(File.dirname(__FILE__), "generate_files/app.rb.erb"))
      rendered = ERB.new(template.read, nil, "<>", "rendered").result(binding)
      File.open(File.join(dir, "#{@file_name}.rb"), "w") do |file|
        file.print rendered
      end
    end
  end
end

Processing::Generator.new.generate!
